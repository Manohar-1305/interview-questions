4. How do we write multi-stage Dockerfile? Why do we need it?

Multi-stage builds allow you to have a clean, lean, and efficient image, focusing only on what's necessary for the runtime environment while maintaining flexibility for complex builds.

Make the image smaller: 
You can use a big image (like one with all the build tools) in the first stage to build your app, then in the next stage, you only copy the finished result into a smaller, lighter image. This means your final image won't have unnecessary files and tools, keeping it small and fast.

Keep things clean:
Multi-stage builds make it easier to organize and manage complex Dockerfiles. You can separate different steps, such as building dependencies, testing, and preparing the runtime environment, into logical stages, making your Dockerfile easier to understand and maintain.

Speed up builds: 
Docker can reuse parts of the build that haven’t changed, so it doesn’t have to rebuild everything every time. This makes future builds faster.

In simple terms, multi-stage builds help you create smaller, cleaner, and faster images for your app.

Example
----------
FROM manoharshetty507/course-website:v1 AS builder

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

COPY requirements.txt /app/

RUN pip install --no-cache-dir -r requirements.txt

# Stage2
FROM python:3.9-alpine

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

COPY --from=builder /app /app

EXPOSE 5000

CMD ["python", "app.py"]
